{"version":3,"sources":["logo.svg","component/userDetails/UserList.js","component/userDetails/UserListBox.js","component/userTodos/UserTodosRepeat.js","component/userTodos/index.js","component/index.js","App.js","serviceWorker.js","reducer/userReducer.js","reducer/todoReducer.js","reducer/index.js","APIservice/DataService.js","index.js"],"names":["module","exports","__webpack_require__","p","UserList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickUser","e","setState","selectValue","target","value","selectedUserDtls","users","filter","item","id","parseInt","dispatch","type","state","userInfo","myNewUsersLi","length","map","react_default","a","createElement","key","name","onChange","Component","connect","UserListBox","console","log","posts","userDetails_UserList","userReducer","UserTodosRepeat","todoLists","UserTodoList","userTodos_UserTodosRepeat","selectedUserTodo","AllUsers","Fragment","userDetails_UserListBox","userTodos","App","className","component","Boolean","window","location","hostname","match","arguments","undefined","action","data","todoReducer","combineReducers","dataService","store","next","request","get","end","err","res","JSON","parse","text","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b48013e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nclass UserList extends Component{    \r\n\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            userInfo: {},\r\n            selectValue: ''\r\n        }\r\n    }\r\n\r\n\r\n    handleClickUser = (e) => {                \r\n        this.setState({\r\n            selectValue: e.target.value\r\n        });\r\n\r\n        let selectedUserDtls = this.props.users.filter( (item) => {\r\n            return item.id === parseInt(e.target.value);\r\n        });\r\n        // // this.props.isClickgetUserInfo('selectedUserDtls', selectedUserDtls);\r\n        // // console.log('selectedUserDtls', selectedUserDtls);\r\n        // // debugger;\r\n        \r\n        this.props.dispatch({\r\n            type: 'SELET_USER_DETAILS',\r\n            selectedUserDtls\r\n        });\r\n\r\n        this.props.dispatch({\r\n            type: 'CALL_TODO_API',\r\n            selectedUserDtls\r\n        });\r\n\r\n    }\r\n\r\n    render(){        \r\n        let myNewUsersLi;\r\n        if(this.props.users.length > 0){\r\n            myNewUsersLi = this.props.users.map( (item) => {\r\n                return (\r\n                    <option key={item.id} id={item.id} value={item.id}>{item.name}</option>\r\n                );\r\n            });                \r\n        }        \r\n\r\n        return(\r\n            <select value={this.state.selectValue} onChange={this.handleClickUser}>\r\n                {myNewUsersLi}\r\n            </select>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default connect() (UserList);","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\n// import users from '../../reducer/index';\r\n// import loading from '../../APIservice/loading';\r\n\r\n// import { connect } from 'react-redux';\r\n\r\n// import UserList from './UserList';\r\nimport UserList from './UserList';\r\n\r\nclass UserListBox extends Component{\r\n    \r\n    render(){\r\n        console.log('this.props.postsUserLis', this.props.posts);\r\n        return(\r\n            <div>                                \r\n                <UserList users={this.props.posts.userReducer} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// export default UserListBox;\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (UserListBox);","import React, { Component } from 'react';\r\n\r\nclass UserTodosRepeat extends Component{\r\n\r\n    render(){\r\n        console.log('this.props.todoLists', this.props.todoLists);\r\n        return(\r\n            <h4>\r\n                My Todo lIst\r\n            </h4>\r\n        );\r\n    };\r\n}\r\n\r\nexport default UserTodosRepeat;","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport UserTodosRepeat from './UserTodosRepeat';\r\n\r\nclass UserTodoList extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>\r\n                    UserTodoList                    \r\n                </h2>\r\n                <UserTodosRepeat todoLists={this.props.selectedUserTodo} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedUserTodo: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserTodoList);","import React, { Component } from 'react';\r\n\r\n\r\nimport UserListBox from './userDetails/UserListBox';\r\nimport UserTodoList from './userTodos/index';\r\n\r\n\r\nclass AllUsers extends Component {\r\n\r\n    render() {        \r\n        return (\r\n            <>\r\n            <UserListBox />\r\n            <UserTodoList />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AllUsers;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport AllUsers from './component';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AllUsers />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {connect} from 'react-redux';\r\n\r\nconst userReducer = (state = [], action) => {\r\n\r\n    console.log('actionUser', action);\r\n    switch (action.type) {\r\n        //     case 'ADD_TODO':\r\n        //         return [\r\n        //             ...state,\r\n        //             todo(\r\n        //                 undefined,\r\n        //                 Object.assign(action, {\r\n        //                     id: state.length\r\n        //                 })\r\n        //             )\r\n        //         ]\r\n        //     case 'TOGGLE_TODO':\r\n        //         return state.map(t => todo(t, action))\r\n        //     /*\r\n        //   Consider all received data as the initial list of\r\n        //   todo items\r\n        //   */\r\n        case 'GET_USER_DATA_RECEIVED':\r\n            return action.data;\r\n        \r\n            \r\n        case 'SELET_USER_DETAILS':\r\n            return action.data;\r\n            // return [\r\n            //     ...state,\r\n\r\n            // ];\r\n        \r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;","const todoReducer = (state = [], action) => {\r\n\r\n    console.log('actionTodoReduceIsimdar', action);\r\n    switch (action.type) {\r\n        //     case 'ADD_TODO':\r\n        //         return [\r\n        //             ...state,\r\n        //             todo(\r\n        //                 undefined,\r\n        //                 Object.assign(action, {\r\n        //                     id: state.length\r\n        //                 })\r\n        //             )\r\n        //         ]\r\n        //     case 'TOGGLE_TODO':\r\n        //         return state.map(t => todo(t, action))\r\n        //     /*\r\n        //   Consider all received data as the initial list of\r\n        //   todo items\r\n        //   */        \r\n        case 'GET_TODO_DATA_RECEIVED':\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todoReducer;","import { combineReducers } from 'redux';\r\n\r\nimport userReducer from './userReducer'\r\nimport todoReducer from './todoReducer'\r\n\r\nexport default combineReducers({\r\n    userReducer,\r\n    todoReducer\r\n})","import request from 'superagent'\r\n\r\nconst dataService = store => next => action => {\r\n  /*\r\n  Pass all actions through by default\r\n  */\r\n  console.log('actionDataService', action);\r\n  // debugger;\r\n  // next(action)\r\n  switch (action.type) {\r\n    case 'GET_USER_DATA':\r\n      /*\r\n    In case we receive an action to send an API request, send the appropriate request\r\n    */\r\n    // request.get('http://localhost:3004/users').end((err, res) => {\r\n      request.get('http://jsonplaceholder.typicode.com/users').end((err, res) => {\r\n        if (err) {\r\n          /*\r\n          in case there is any error, dispatch an action containing the error\r\n          */\r\n          return next({\r\n            type: 'GET_TODO_DATA_ERROR',\r\n            err\r\n          })\r\n        }\r\n        const data = JSON.parse(res.text)\r\n        console.log('data', data);\r\n        /*\r\n        Once data is received, dispatch an action telling the application\r\n        that data was received successfully, along with the parsed data\r\n        */\r\n        next({\r\n          type: 'GET_USER_DATA_RECEIVED',\r\n          data\r\n        })\r\n      })\r\n      break\r\n\r\n      case 'CALL_TODO_API':\r\n      /*\r\n    In case we receive an action to send an API request, send the appropriate request\r\n    */\r\n      request.get('http://jsonplaceholder.typicode.com/todos').end((err, res) => {\r\n        if (err) {\r\n          /*\r\n          in case there is any error, dispatch an action containing the error\r\n          */\r\n          return next({\r\n            type: 'GET_TODO_DATA_ERROR1',\r\n            err\r\n          })\r\n        }\r\n        const data = JSON.parse(res.text)\r\n        // console.log('data', data);\r\n        /*\r\n        Once data is received, dispatch an action telling the application\r\n        that data was received successfully, along with the parsed data\r\n        */\r\n        next({\r\n          type: 'GET_TODO_DATA_RECEIVED',\r\n          data\r\n        })\r\n      })\r\n      break\r\n    /*\r\n  Do nothing if the action does not interest us\r\n  */\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default dataService","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport combineReducers from './reducer/index';\n\nimport dataService from './APIservice/DataService';\n\nconst store = createStore(combineReducers, {}, composeWithDevTools(applyMiddleware(dataService)));\n\n// console.log('store', store);\n// console.log('store', store.getState());\n\n\nReactDOM.render( <Provider store={store} > <App /> </Provider>, \n    document.getElementById('root'));\n\nstore.dispatch({ type: 'GET_USER_DATA' });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}